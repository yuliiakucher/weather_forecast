{"version":3,"sources":["components/3DaysForecast/OneDayForecast/OneDayForecast.js","components/3DaysForecast/3DaysForecast.js","api/api.js","redux/map-reducer.js","components/WeatherMap/WeatherMap.js","components/FavCities/FavCity/FavCity.js","utilits/utilits.js","redux/fav-reducer.js","components/FavCities/FavCitiesClass.js","components/HomePage/HomePage.js","redux/current-reducer.js","components/Header/Header.js","redux/forecast-reducer.js","components/WeatherDetails/WeatherDetails.js","components/WeatherDetails/WeatherDetailsContainer.js","App.js","serviceWorker.js","redux/store.js","index.js","components/WeatherMap/WeatherMap.module.css","components/Header/Header.module.css","components/3DaysForecast/OneDayForecast/OneDayForecast.module.css","components/FavCities/FavCity/FavCity.module.css"],"names":["OneDayForecast","date","temp_min","temp_max","icon","details","local_date","Date","Card","Body","className","style","card_body","Row","Col","lg","Img","maxWidth","src","Title","toDateString","split","Subtitle","right_badge","Math","ceil","connect","state","three_days_forecast","ForecastReducer","isLoading","props","Header","to","textDecoration","color","Spinner","animation","role","map","one_day_forecast","index","key","dt","temp","min","max","weather","main","api_key","instance","axios","baseURL","CurrentWeather","lat","lon","units","get","city","initialState","markers","MapReducer","action","type","latlng","WeatherMap","addMarker","e","console","log","push","setMarker","lng","setState","Map","center","localStorage","getItem","onClick","this","zoom","leaflet_container","TileLayer","attribution","url","marker","Marker","position","divIcon","html","renderToStaticMarkup","img","alt","React","Component","dispatch","then","response","data","FavCity","name","country","humidity","wind_dir","wind_speed","changeStorage","Button","variant","fav_locations","setItem","filter","word","join","deleteFromFavs","Image","Footer","faTint","faWind","windRose","degr","favs","favsStorage","name_local","FavReducer","FavCitiesClass","input","handleSubmit","getFavPlace","local","location","clearFavs","Container","Accordion","Toggle","as","eventKey","Collapse","Form","Control","onChange","target","value","fav","CurrentReducer","sys","wind","deg","speed","HomePage","SET_LOADER","getInfoFromCoordinates","payload","getUnits","setUnits","useState","isFahrenheit","setFahrenheit","useEffect","styles","background","switch","cn","slider","round","seven_days_forecast","isLoading7Days","setPreloader7Days","WeatherDetails","time","toLocaleTimeString","slice","day","toLocaleDateString","feels_like","description","toUpperCase","pressure","visibility","daily","isLoadingForecast","getWeatherDetails","get7DaysForecast","getForecastInfo","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","from","exact","path","render","Boolean","window","hostname","match","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.04e1b8e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport style from './OneDayForecast.module.css'\r\n\r\nconst OneDayForecast = ({date, temp_min, temp_max, icon, details,}) => {\r\n    const local_date = new Date(date* 1000)\r\n    return (\r\n\r\n        <Card.Body className={style.card_body}>\r\n            <Row>\r\n                <Col lg={3}><Card.Img style={{maxWidth: '100px'}} src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/> </Col>\r\n                <Col>\r\n                    <Card.Title>{local_date.toDateString().split(' ')[0]},\r\n                        {local_date.toDateString().split(' ')[1]}  {local_date.toDateString().split(' ')[2]}\r\n\r\n                    </Card.Title>\r\n                    <Card.Subtitle>{details}</Card.Subtitle>\r\n                </Col>\r\n                <Col className={style.right_badge} lg={3}>\r\n                    <div>{Math.ceil(temp_min)}°C/{Math.ceil(temp_max)}°C</div>\r\n                </Col>\r\n            </Row>\r\n        </Card.Body>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default OneDayForecast\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport OneDayForecast from \"./OneDayForecast/OneDayForecast\";\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst ThreeDaysForecast = (props) => {\r\n    return (\r\n        <Card>\r\n            <Card.Header className='d-flex flex-row justify-content-between'>\r\n                <Card.Title>\r\n                    3 Days Forecast\r\n                </Card.Title>\r\n                <NavLink to={'/details'} style={{textDecoration: 'none', color: 'black'}}>\r\n                    See more...\r\n                </NavLink>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                {props.isLoading\r\n                    ? <Spinner animation=\"border\" role=\"status\"/>\r\n                    : props.three_days_forecast.map((one_day_forecast, index) => {\r\n                            return < OneDayForecast\r\n                                key={index}\r\n                                date={one_day_forecast.dt}\r\n                                temp_min={one_day_forecast.temp.min}\r\n                                temp_max={one_day_forecast.temp.max}\r\n                                icon={one_day_forecast.weather[0].icon}\r\n                                details={one_day_forecast.weather[0].main}\r\n                            />\r\n                        }\r\n                    )\r\n                }\r\n\r\n\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        three_days_forecast: state.ForecastReducer.three_days_forecast,\r\n        isLoading: state.ForecastReducer.isLoading,\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ThreeDaysForecast)\r\n","import * as axios from 'axios'\r\n\r\nconst api_key = 'a8de334d1f2f9e32c071bebca2a3e9ac'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/'\r\n})\r\n\r\nexport const CurrentWeather = {\r\n    getCurrentWeather(lat, lon, units = 'metric') {\r\n        return (\r\n            instance.get(`weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=${units}`)\r\n        )\r\n    },\r\n    getThreeDaysForecast(lat, lon, units = 'metric') {\r\n        return (\r\n            instance.get(`forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=${units}`)\r\n        )\r\n    },\r\n    getFavCity(city, units = 'metric') {\r\n        return (\r\n            instance.get(`weather?q=${city}&appid=${api_key}&units=${units}`)\r\n        )\r\n    },\r\n    get7DaysForecast(lat, lon, units = 'metric') {\r\n        return (\r\n            instance.get(`onecall?lat=${lat}&lon=${lon}&exclude=current,minutely,hourly,alerts&appid=${api_key}&units=${units}`)\r\n        )\r\n    }\r\n}\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_CURRENT_WEATHER = 'GET_CURRENT_WEATHER'\r\n\r\nconst initialState = {\r\n    markers: []\r\n}\r\n\r\nconst MapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_CURRENT_WEATHER):\r\n            return {\r\n                ...state,\r\n                markers: [...state.markers, {icon: action.icon, temp: action.temp, latlng: action.latlng}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCurrentWeather = (icon, temp, latlng) => ({type: GET_CURRENT_WEATHER, icon, temp, latlng})\r\n\r\nexport const setMarker = (lat, lon) => {\r\n    return dispatch => {\r\n        CurrentWeather.getCurrentWeather(lat, lon)\r\n            .then(response => {\r\n                console.log(response)\r\n                dispatch(getCurrentWeather(\r\n                    response.data.weather[0].icon,\r\n                    Math.ceil(response.data.main.temp),\r\n                    {lat: lat, lng:lon}\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\nexport default MapReducer\r\n","import React from \"react\";\r\nimport {Map, Marker, TileLayer} from \"react-leaflet\";\r\nimport style from './WeatherMap.module.css'\r\nimport {setMarker} from \"../../redux/map-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {divIcon} from \"leaflet\";\r\nimport {renderToStaticMarkup} from \"react-dom/server\";\r\n\r\n\r\nclass WeatherMap extends React.Component {\r\n\r\n    state = {\r\n        markers: [[49.823, 23.959]],\r\n    }\r\n\r\n    addMarker = (e) => {\r\n        const {markers} = this.state\r\n        console.log(markers)\r\n        markers.push(e.latlng)\r\n        console.log(markers)\r\n        this.props.setMarker(e.latlng.lat, e.latlng.lng)\r\n        this.setState({markers})\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                center={[localStorage.getItem('lat'), localStorage.getItem('lon')]}\r\n                onClick={this.addMarker}\r\n                zoom={13}\r\n                className={style.leaflet_container}\r\n            >\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n                />\r\n                {this.props.markers.map((marker, index) =>\r\n\r\n                    <Marker key={index} position={marker.latlng}\r\n                            icon={new divIcon({\r\n                                html: renderToStaticMarkup(<div className={style.marker}>\r\n                                    <img\r\n                                        src={`http://openweathermap.org/img/wn/${marker.icon}@2x.png`}\r\n                                        className={style.img}\r\n                                        alt='marker'/>\r\n                                    <p className={style.temp}>{marker.temp}°C</p>\r\n                                </div>),\r\n                            })}>\r\n                    </Marker>\r\n                )}\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        markers: state.MapReducer.markers\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {setMarker})(WeatherMap)\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport style from './FavCity.module.css'\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faWind, faTint} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst FavCity = ({name, country, temp, icon, humidity, wind_dir, wind_speed, changeStorage}) => {\r\n\r\n    const deleteFromFavs = (name) => {\r\n        const fav_locations = localStorage.getItem('fav_location')\r\n        localStorage.setItem('fav_location', fav_locations.split(' ').filter(word => word !== name).join(' '))\r\n        changeStorage(localStorage.getItem('fav_location'))\r\n    }\r\n\r\n    return (\r\n        <Card className='m-1'>\r\n            <Row className='m-1 d-flex flex-column align-items-end'>\r\n                <Button\r\n                    variant={'outline-info'}\r\n                    className='w-25 btn-sm'\r\n                    onClick={() => deleteFromFavs(name)}\r\n                >X</Button>\r\n            </Row>\r\n\r\n            <Card.Body>\r\n                <Row>\r\n                    <Col className={style.icon} lg={3}>\r\n                        <Image\r\n                            style={{maxWidth: '70px'}}\r\n                            src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <h4>{temp}°C</h4>\r\n                    </Col>\r\n                    <Col className={style.name}>\r\n                        <div>{name}</div>\r\n                        <div>{country}</div>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <Row><div><FontAwesomeIcon icon={faTint}/> Humidity: {humidity}%</div></Row>\r\n                <Row><div><FontAwesomeIcon icon={faWind}/> {wind_speed} meter/sec {wind_dir}</div></Row>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default FavCity\r\n","export const windRose = (degr) => {\r\n    switch (true) {\r\n        case  (degr > 22.5 && degr < 67.5): return 'NE'\r\n        case  (degr > 67.5 && degr<112.5): return 'E'\r\n        case  (degr > 112.5 && degr<157.5): return 'SE'\r\n        case  (degr > 157.5  && degr< 202.5) : return 'S'\r\n        case  (degr > 202.5  && degr< 247.5) : return 'SW'\r\n        case ( degr > 247.5  && degr< 292.5 ): return 'W'\r\n        case  (degr > 292.5  && degr< 337.5 ): return 'NW'\r\n        default: return 'N'\r\n    }\r\n\r\n}\r\n","import {CurrentWeather} from \"../api/api\";\r\nimport {windRose} from \"../utilits/utilits\";\r\n\r\nconst GET_FAV_PLACE_INFO = 'GET_FAV_PLACE_INFO'\r\nconst GET_FAV_STORAGE = 'GET_FAV_STORAGE'\r\nconst CLEAR_FAVS = 'CLEAR_FAVS'\r\n\r\nconst initialState = {\r\n    favs: [],\r\n    favsStorage: ''\r\n}\r\n\r\nconst FavReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FAV_PLACE_INFO: {\r\n            return {\r\n                ...state,\r\n                favs: [...state.favs, {\r\n                    name: action.name,\r\n                    country: action.country,\r\n                    temp: action.temp,\r\n                    icon: action.icon,\r\n                    humidity: action.humidity,\r\n                    wind_dir: action.wind_dir,\r\n                    wind_speed: action.wind_speed\r\n                }]\r\n            }\r\n        }\r\n        case GET_FAV_STORAGE: {\r\n            return {\r\n                ...state,\r\n                favsStorage: action.name_local\r\n            }\r\n        }\r\n        case CLEAR_FAVS: {\r\n            return {\r\n                ...state,\r\n                favs: []\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n\r\nconst setFavPlace = (name, country, temp, icon, humidity, wind_dir, wind_speed) => ({\r\n    type: GET_FAV_PLACE_INFO,\r\n    name,\r\n    country,\r\n    temp,\r\n    icon,\r\n    humidity,\r\n    wind_dir,\r\n    wind_speed\r\n})\r\n\r\nconst setClearFavs = () => ({type: CLEAR_FAVS})\r\n\r\nexport const changeStorage = (name_local) => ({type: GET_FAV_STORAGE, name_local})\r\n\r\nexport const getFavPlace = (city, units) => {\r\n    return dispatch => {\r\n        CurrentWeather.getFavCity(city, units)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                dispatch(setFavPlace(\r\n                    response.data.name,\r\n                    response.data.sys.country,\r\n                    Math.ceil(response.data.main.temp),\r\n                    response.data.weather[0].icon,\r\n                    response.data.main.humidity,\r\n                    windRose(response.data.wind.deg),\r\n                    response.data.wind.speed,\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\nexport const setStorage = (city) => {\r\n    return dispatch => {\r\n        dispatch(changeStorage(city))\r\n    }\r\n}\r\n\r\n\r\nexport const clearFavs = () => {\r\n    return dispatch => {\r\n        dispatch(setClearFavs())\r\n    }\r\n}\r\n\r\n\r\nexport default FavReducer\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FavCity from \"./FavCity/FavCity\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeStorage, clearFavs, getFavPlace} from \"../../redux/fav-reducer\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {Accordion} from \"react-bootstrap\";\r\n\r\nclass FavCitiesClass extends React.Component {\r\n\r\n    state = {\r\n        input: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('fav_location')) {\r\n            const locations = localStorage.getItem('fav_location').split(' ')\r\n            locations.map(location => this.props.getFavPlace(location, this.props.units))\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearFavs()\r\n    }\r\n\r\n\r\n    handleSubmit = (data) => {\r\n        this.props.getFavPlace(data)\r\n        if (localStorage.getItem('fav_location')) {\r\n            const local = localStorage.getItem('fav_location').split(' ')\r\n            local.push(data)\r\n            localStorage.setItem('fav_location', local.join(' '))\r\n            this.props.changeStorage(localStorage.getItem('fav_location'))\r\n        } else {\r\n            localStorage.setItem('fav_location', data)\r\n            this.props.changeStorage(localStorage.getItem('fav_location'))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h3>Your Locations</h3>\r\n                <Container className='m-2'>\r\n                    <Row className='mx-2'>\r\n                        <Accordion>\r\n                            <Row lg={10}>\r\n                                <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"0\">\r\n                                    Add city\r\n                                </Accordion.Toggle>\r\n                            </Row>\r\n                            <Row lg={10} className='my-2'>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Control\r\n                                                onChange={e => this.setState({input: e.target.value})}\r\n                                                value={this.state.input}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button variant={'info'}\r\n                                                    onClick={() => this.handleSubmit(this.state.input)}>+</Button>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                </Accordion.Collapse>\r\n                            </Row>\r\n\r\n                        </Accordion>\r\n\r\n\r\n\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n                {this.props.favs.map(fav => (\r\n                        <FavCity\r\n                            name={fav.name}\r\n                            country={fav.country}\r\n                            temp={fav.temp}\r\n                            icon={fav.icon}\r\n                            humidity={fav.humidity}\r\n                            wind_dir={fav.wind_dir}\r\n                            wind_speed={fav.wind_speed}\r\n                            favsStorage={this.props.favsStorage}\r\n                            changeStorage={changeStorage}\r\n                        />\r\n                    )\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        favs: state.FavReducer.favs,\r\n        favsStorage: state.FavReducer.favsStorage,\r\n        units: state.CurrentReducer.units\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getFavPlace, changeStorage, clearFavs})(FavCitiesClass)\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ThreeDaysForecast from \"../3DaysForecast/3DaysForecast\";\r\nimport WeatherMap from \"../WeatherMap/WeatherMap\";\r\nimport FavCitiesClass from \"../FavCities/FavCitiesClass\";\r\n\r\n\r\nconst HomePage = () => {\r\n\r\n    return (\r\n        <Container className='m-4'>\r\n            <Row>\r\n                <Col>\r\n                    <ThreeDaysForecast/>\r\n                </Col>\r\n                <Col>\r\n                    <WeatherMap/>\r\n                </Col>\r\n                <Col lg={3}>\r\n                    <FavCitiesClass/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_INFO_FROM_COORDINATES = 'GET_INFO_FROM_COORDINATES'\r\nconst GET_WEATHER_DETAILS = 'GET_WEATHER_DETAILS'\r\nconst SET_LOADER = 'current/SET_PRELOADER'\r\nconst SET_UNITS = 'SET_UNITS'\r\n\r\n\r\nconst initialState = {\r\n    city: null,\r\n    country: null,\r\n    temp: null,\r\n    icon: null,\r\n    details: '',\r\n    isLoading: true,\r\n    units: 'metric'\r\n\r\n}\r\n\r\nconst CurrentReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_INFO_FROM_COORDINATES): {\r\n            return {\r\n                ...state,\r\n                city: action.city,\r\n                country: action.country,\r\n                temp: Math.ceil(action.temp),\r\n                icon: action.icon,\r\n                main: action.main\r\n            }\r\n\r\n        }\r\n        case GET_WEATHER_DETAILS: {\r\n            return {\r\n                ...state,\r\n                details: action.payload\r\n            }\r\n        }\r\n        case SET_LOADER: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        }\r\n        case SET_UNITS: {\r\n            return {\r\n                ...state,\r\n                units: action.units\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst setPreloader = (value) => ({type: SET_LOADER, value})\r\nconst setInfoFromCoordinates = (city,country, temp, icon, main) => ({type: GET_INFO_FROM_COORDINATES, city,country, temp, icon, main})\r\nconst setWeatherDetails = (payload) => ({type: GET_WEATHER_DETAILS, payload})\r\nconst setUnits = (units) => ({type: SET_UNITS, units})\r\n\r\nexport const getInfoFromCoordinates = (lat, lon, units) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.getCurrentWeather(lat, lon, units)\r\n            .then(response => {\r\n                console.log(response)\r\n                dispatch(setInfoFromCoordinates(\r\n                    response.data.name,\r\n                    response.data.sys.country,\r\n                    response.data.main.temp,\r\n                    response.data.weather[0].icon,\r\n                    response.data.weather[0].main\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getWeatherDetails = (lat, lon, units) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.getCurrentWeather(lat, lon, units)\r\n            .then(response => {\r\n                console.log(response)\r\n                dispatch(setWeatherDetails(response.data))\r\n                dispatch(setPreloader(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport const getUnits = (units) => {\r\n    return dispatch => {\r\n        dispatch(setUnits(units))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default CurrentReducer\r\n","import React, {useEffect} from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {getInfoFromCoordinates, getUnits} from \"../../redux/current-reducer\";\r\nimport styles from './Header.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Header = ({city, country, temp, main, icon, getInfoFromCoordinates, getUnits, units}) => {\r\n\r\n    const [isFahrenheit, setFahrenheit] = React.useState(true);\r\n\r\n    const toggleSwitcher = () => {\r\n        setFahrenheit(!isFahrenheit);\r\n        isFahrenheit ? getUnits('imperial') : getUnits('metric')\r\n\r\n    };\r\n    useEffect(() => {\r\n        getInfoFromCoordinates(localStorage.getItem('lat'), localStorage.getItem('lon'), units)\r\n    }, [units])\r\n    return (\r\n        <Container className={styles.background}>\r\n            <Row>\r\n                <Col lg={1} className={'d-flex flex-column justify-content-start ml-5'}>\r\n                    <div>\r\n                        <NavLink to={'/weather_forecast'}>\r\n                            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='weather-icon'/>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                </Col>\r\n                <Col lg={1} className={'d-flex flex-column justify-content-center align-items-start'}>\r\n                    <h4>{temp}°C</h4>\r\n                    <h4>{main}</h4>\r\n                </Col>\r\n                <Col lg={2}\r\n                     className={'d-flex flex-column justify-content-center align-items-start'}>\r\n                    <h3>{city}, {country}</h3>\r\n                </Col>\r\n                <Col lg={7} className='d-flex flex-row justify-content-end align-items-end'>\r\n                    <div className='d-flex flex-row align-items-center'>\r\n                        <span className='mx-2 font-weight-bold'>°C</span>\r\n                        <label className={styles.switch}>\r\n                            <input type=\"checkbox\" value={isFahrenheit} onChange={toggleSwitcher}/>\r\n                            <span className={cn(styles.slider, styles.round)}></span>\r\n                        </label>\r\n                        <span className='mx-2 font-weight-bold'>F</span>\r\n                    </div>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        city: state.CurrentReducer.city,\r\n        country: state.CurrentReducer.country,\r\n        temp: state.CurrentReducer.temp,\r\n        icon: state.CurrentReducer.icon,\r\n        main: state.CurrentReducer.main,\r\n        units: state.CurrentReducer.units\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getInfoFromCoordinates, getUnits})(Header)\r\n\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_FORECAST_INFO = 'GET_FORECAST_INFO'\r\nconst GET_7DAYS_FORECAST = 'GET_7DAYS_FORECAST'\r\nconst SET_PRELOADER = 'SET_PRELOADER'\r\nconst SET_PRELOADER_7DAYS = 'SET_PRELOADER_7DAYS'\r\n\r\nconst initialState = {\r\n    three_days_forecast: [],\r\n    seven_days_forecast: [],\r\n    isLoading: true,\r\n    isLoading7Days: true\r\n\r\n}\r\n\r\nconst ForecastReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FORECAST_INFO: {\r\n            return {\r\n                ...state,\r\n                three_days_forecast: action.payload\r\n            }\r\n        }\r\n        case SET_PRELOADER: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        }\r\n        case SET_PRELOADER_7DAYS: {\r\n            return {\r\n                ...state,\r\n                isLoading7Days: action.value\r\n            }\r\n        }\r\n        case GET_7DAYS_FORECAST: {\r\n            return {\r\n                ...state,\r\n                seven_days_forecast: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setForecastInfo = (payload) => ({type: GET_FORECAST_INFO, payload})\r\n\r\nconst set7DaysForecast = (payload) => ({type: GET_7DAYS_FORECAST, payload})\r\n\r\nexport let setPreloader = (value) => ({type: SET_PRELOADER, value})\r\nexport let setPreloader7Days = (value) => ({type: SET_PRELOADER_7DAYS, value})\r\n\r\nexport const getForecastInfo = (lat, lon, units) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.get7DaysForecast(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(setForecastInfo(response.data.daily.slice(1,4)))\r\n                dispatch(setPreloader(false))\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const get7DaysForecast = (lat, lon, units) => {\r\n    return dispatch => {\r\n        dispatch(setPreloader7Days(true))\r\n        CurrentWeather.get7DaysForecast(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(set7DaysForecast(response.data))\r\n                dispatch(setPreloader7Days(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport default ForecastReducer\r\n","import React from \"react\";\r\nimport {Container, Card, Row, Col} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faWind} from '@fortawesome/free-solid-svg-icons'\r\nimport {windRose} from \"../../utilits/utilits\";\r\nimport OneDayForecast from \"../3DaysForecast/OneDayForecast/OneDayForecast\";\r\n\r\nconst WeatherDetails = ({details, seven_days_forecast}) => {\r\n\r\n    const date = new Date(details.dt * 1000)\r\n    const time = date.toLocaleTimeString().slice(0, 5)\r\n    const day = date.toLocaleDateString()\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <p style={{color: '#fc623e'}}>{time}, {day}</p>\r\n                            <Card.Title><h1>{details.name}, {details.sys.country}</h1></Card.Title>\r\n                            <div>\r\n                                <img src={`http://openweathermap.org/img/wn/${details.weather[0].icon}@2x.png`}\r\n                                     alt='weather-icon'/>\r\n                                <span>{Math.ceil(details.main.temp)}°C</span>\r\n                            </div>\r\n                            <div>\r\n                                <p>Feels like {Math.ceil(details.main.feels_like)}°C. {details\r\n                                    .weather[0].description[0].toUpperCase()}\r\n                                    {details.weather[0].description.slice(1)}</p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    <FontAwesomeIcon icon={faWind}/>\r\n                                    {details.wind.speed} m/s {windRose(details.wind.deg)} Pressure:\r\n                                    {details.main.pressure}hPa Humidity: {details.main.humidity}%\r\n                                </p>\r\n                                <p>\r\n                                    Visibility: {details.visibility / 100} km\r\n                                </p>\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title><h2>8-day forecast</h2></Card.Title>\r\n                            {seven_days_forecast.daily.map((day, index) => {\r\n                                    const {min, max} = day.temp\r\n                                    const {icon, main} = day.weather[0]\r\n                                    return <OneDayForecast\r\n                                        key={index}\r\n                                        temp_max={max}\r\n                                        temp_min={min}\r\n                                        icon={icon}\r\n                                        date={day.dt}\r\n                                        details={main}/>\r\n                                }\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default WeatherDetails\r\n","import React, {useEffect} from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport {Spinner} from \"react-bootstrap\";\r\nimport {getWeatherDetails} from \"../../redux/current-reducer\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\nimport {get7DaysForecast} from \"../../redux/forecast-reducer\";\r\n\r\nconst WeatherDetailsContainer = ({getWeatherDetails, details,\r\n                                     isLoading, get7DaysForecast, seven_days_forecast,\r\n                                     isLoadingForecast, units}) => {\r\n\r\n    const lat = localStorage.getItem('lat')\r\n    const lon = localStorage.getItem('lon')\r\n\r\n    useEffect(() => {\r\n        getWeatherDetails(lat, lon, units)\r\n        get7DaysForecast(lat, lon, units)\r\n    }, [units])\r\n\r\n    console.log(isLoading, isLoadingForecast)\r\n    return (\r\n        <div className='d-flex flex-column align-items-center'>\r\n            {isLoading ||  isLoadingForecast\r\n                ? <Spinner animation=\"border\" variant=\"info\"/>\r\n                : <WeatherDetails details={details} seven_days_forecast={seven_days_forecast}/>\r\n            }\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        details: state.CurrentReducer.details,\r\n        isLoading: state.CurrentReducer.isLoading,\r\n        isLoadingForecast: state.ForecastReducer.isLoading7Days,\r\n        seven_days_forecast: state.ForecastReducer.seven_days_forecast,\r\n        units: state.CurrentReducer.units\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getWeatherDetails, get7DaysForecast})(WeatherDetailsContainer)\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport HomePage from \"./components/HomePage/HomePage\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport {connect} from \"react-redux\";\nimport {getInfoFromCoordinates} from \"./redux/current-reducer\";\nimport {getForecastInfo} from \"./redux/forecast-reducer\";\nimport WeatherDetailsContainer from \"./components/WeatherDetails/WeatherDetailsContainer\";\n\nconst App = (props) => {\n\n    const getCurrentLocation = () => {\n        navigator.geolocation.getCurrentPosition(position => {\n            localStorage.setItem('lat', position.coords.latitude)\n            localStorage.setItem('lon', position.coords.longitude)\n        }, () => {\n            localStorage.setItem('lat', 51.5074)\n            localStorage.setItem('lon', 0.1278)\n        })\n    }\n\n\n    useEffect(() => {\n        getCurrentLocation()\n        props.getForecastInfo(localStorage.getItem('lat'), localStorage.getItem('lon'), props.units)\n    }, [props.units])\n\n    return (\n        <>\n            <Header/>\n            <Redirect from=\"/\" to=\"/weather_forecast\"/>\n            <Route exact path='/weather_forecast' render={() => <HomePage/>}/>\n            <Route path='/details' render={() => <WeatherDetailsContainer/>}/>\n        </>\n    );\n}\n\nlet mapStateToProps = (state) => {\n    return{\n        units: state.CurrentReducer.units\n    }\n}\n\nexport default connect(mapStateToProps, {getInfoFromCoordinates, getForecastInfo})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport CurrentReducer from \"./current-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport ForecastReducer from \"./forecast-reducer\";\r\nimport FavReducer from \"./fav-reducer\";\r\nimport MapReducer from \"./map-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n        CurrentReducer: CurrentReducer,\r\n        ForecastReducer: ForecastReducer,\r\n        FavReducer: FavReducer,\r\n        MapReducer: MapReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaflet_container\":\"WeatherMap_leaflet_container__MMeZe\",\"img\":\"WeatherMap_img__twUzL\",\"marker\":\"WeatherMap_marker__5IGLc\",\"temp\":\"WeatherMap_temp__1m3fF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Header_background__2Bu-x\",\"switch\":\"Header_switch__1J-gm\",\"slider\":\"Header_slider__3in5L\",\"round\":\"Header_round__1JOks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"right_badge\":\"OneDayForecast_right_badge__FhEbM\",\"card_body\":\"OneDayForecast_card_body__3MXMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"FavCity_name__2d_Ez\",\"icon\":\"FavCity_icon__3UNuD\"};"],"sourceRoot":""}