{"version":3,"sources":["components/HomePage/HomePage.module.css","components/3DaysForecast/OneDayForecast/OneDayForecast.module.css","components/FavCities/FavCity/FavCity.module.css","components/WeatherMap/WeatherMap.module.css","components/3DaysForecast/OneDayForecast/OneDayForecast.js","components/3DaysForecast/3DaysForecast.js","api/api.js","redux/current-reducer.js","redux/forecast-reducer.js","redux/map-reducer.js","components/WeatherMap/WeatherMap.js","components/FavCities/FavCity/FavCity.js","redux/fav-reducer.js","components/FavCities/FavCitiesClass.js","components/Header/Header.js","components/HomePage/HomePage.js","components/WeatherDetails/WeatherDetails.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","OneDayForecast","date","temp_min","temp_max","icon","details","local_date","Date","Card","Body","className","style","card_body","Row","Col","Img","src","Title","toDateString","split","Subtitle","right_badge","connect","state","three_days_forecast","ForecastReducer","isLoading","props","Header","Spinner","animation","role","map","one_day_forecast","key","api_key","instance","axios","baseURL","CurrentWeather","lat","lon","get","city","initialState","temp","getInfoFromCoordinates","dispatch","then","response","main","console","log","data","name","weather","type","CurrentReducer","action","Math","ceil","setForecastInfo","getForecastInfo","nowData","day1","list","filter","item","dt_txt","getDate","sort","a","b","day2","day3","value","markers","MapReducer","latlng","WeatherMap","addMarker","e","push","setMarker","lng","setState","Map","center","onClick","this","zoom","leaflet_container","TileLayer","attribution","url","marker","index","Marker","position","Popup","autoPan","width","alt","React","Component","FavCity","country","humidity","wind_dir","wind_speed","favsStorage","changeStorage","useEffect","Button","variant","fav_locations","localStorage","getItem","setItem","word","join","deleteFromFavs","Image","Footer","favs","name_local","FavReducer","FavCitiesClass","show","input","handleSubmit","getFavPlace","local","location","prevProps","prevState","snapshot","Container","lg","Form","Control","onChange","target","fav","sys","degr","windRose","wind","deg","speed","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","background","to","WeatherDetails","App","exact","path","render","Boolean","window","hostname","match","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f493ca3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"HomePage_background__2eppM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"right_badge\":\"OneDayForecast_right_badge__FhEbM\",\"card_body\":\"OneDayForecast_card_body__3MXMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"FavCity_name__2d_Ez\",\"icon\":\"FavCity_icon__3UNuD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaflet_container\":\"WeatherMap_leaflet_container__MMeZe\"};","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport style from './OneDayForecast.module.css'\r\n\r\nconst OneDayForecast = ({date, temp_min,temp_max, icon, details,}) => {\r\n    const local_date = new Date(date)\r\n    return(\r\n\r\n            <Card.Body className={style.card_body}>\r\n                <Row >\r\n                    <Col><Card.Img src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/> </Col>\r\n                    <Col>\r\n                        <Card.Title>{local_date.toDateString().split(' ')[0]}</Card.Title>\r\n                        <Card.Subtitle>{details}</Card.Subtitle>\r\n                    </Col>\r\n                    <Col className={style.right_badge}>\r\n                        <div>{temp_min}°C/{temp_max}°C</div>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default OneDayForecast\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport OneDayForecast from \"./OneDayForecast/OneDayForecast\";\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst ThreeDaysForecast = (props) => {\r\n    return (\r\n        <Card>\r\n            <Card.Header>\r\n                <Card.Title>\r\n                    3 Days Forecast\r\n                </Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                {props.isLoading\r\n                    ? <Spinner animation=\"border\" role=\"status\"/>\r\n                    : props.three_days_forecast.map(one_day_forecast => (\r\n                            <OneDayForecast\r\n                                key={one_day_forecast.temp_min}\r\n                                date={one_day_forecast.date}\r\n                                temp_min={one_day_forecast.temp_min}\r\n                                temp_max={one_day_forecast.temp_max}\r\n                                icon={one_day_forecast.icon}\r\n                                details={one_day_forecast.details}/>\r\n                        )\r\n                    )\r\n                }\r\n\r\n\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        three_days_forecast: state.ForecastReducer.three_days_forecast,\r\n        isLoading: state.ForecastReducer.isLoading,\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ThreeDaysForecast)\r\n","import * as axios from 'axios'\r\n\r\nconst api_key = 'a8de334d1f2f9e32c071bebca2a3e9ac'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/'\r\n})\r\n\r\nexport const CurrentWeather = {\r\n    getCurrentWeather(lat, lon) {\r\n        return(\r\n            instance.get(`weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`)\r\n        )\r\n    },\r\n    getThreeDaysForecast(lat, lon) {\r\n        return(\r\n            instance.get(`forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=metric`)\r\n        )\r\n    },\r\n    getFavCity(city) {\r\n        return(\r\n            instance.get(`weather?q=${city}&appid=${api_key}&units=metric`)\r\n        )\r\n    },\r\n}\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_INFO_FROM_COORDINATES = 'GET_INFO_FROM_COORDINATES'\r\n\r\nconst initialState = {\r\n    city: null,\r\n    temp: null,\r\n    icon: null\r\n}\r\n\r\nconst CurrentReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_INFO_FROM_COORDINATES):{\r\n            return {\r\n                ...state,\r\n                city: action.city,\r\n                temp: Math.ceil(action.temp),\r\n                icon: action.icon,\r\n                main: action.main\r\n            }\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setInfoFromCoordinates = (city, temp, icon, main) => ({type: GET_INFO_FROM_COORDINATES, city, temp, icon, main})\r\n\r\nexport const getInfoFromCoordinates = (lat, lon) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.getCurrentWeather(lat, lon)\r\n            .then(response => {\r\n                console.log(response)\r\n                dispatch(setInfoFromCoordinates(response.data.name,\r\n                    response.data.main.temp,\r\n                    response.data.weather[0].icon,\r\n                    response.data.weather[0].main\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\nexport default CurrentReducer\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_FORECAST_INFO = 'GET_FORECAST_INFO'\r\nconst SET_PRELOADER = 'SET_PRELOADER'\r\n\r\nconst initialState = {\r\n    three_days_forecast: [\r\n    ],\r\n    isLoading: true\r\n\r\n}\r\n\r\nconst ForecastReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FORECAST_INFO: {\r\n            return {\r\n                ...state,\r\n                three_days_forecast: [...state.three_days_forecast, {\r\n                    date: action.date,\r\n                    temp_min: Math.ceil(action.temp_min),\r\n                    temp_max: Math.ceil(action.temp_max),\r\n                    icon: action.icon,\r\n                    details: action.details\r\n                }],\r\n\r\n            }\r\n        }\r\n        case SET_PRELOADER: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setForecastInfo = (date, temp_min, temp_max, icon, details) => ({\r\n    type: GET_FORECAST_INFO,\r\n    date,\r\n    temp_min,\r\n    temp_max,\r\n    icon,\r\n    details\r\n})\r\n\r\nexport let setPreloader = (value) => ({type: SET_PRELOADER, value})\r\n\r\nexport const getForecastInfo = (lat, lon) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.getThreeDaysForecast(lat, lon)\r\n            .then(response => {\r\n                const nowData = new Date()\r\n\r\n                const day1 = response.data.list.filter(item => {\r\n                    const d = new Date(item.dt_txt)\r\n                    return (\r\n                        d.getDate() === nowData.getDate() + 1\r\n                    )\r\n                })\r\n                day1.sort((a, b) => a.main.temp - b.main.temp)\r\n                dispatch(setForecastInfo(day1[0].dt_txt,\r\n                    day1[0].main.temp,\r\n                    day1[7].main.temp,\r\n                    day1[0].weather[0].icon,\r\n                    day1[0].weather[0].main,\r\n                ))\r\n\r\n                const day2 = response.data.list.filter(item => {\r\n                    const d = new Date(item.dt_txt)\r\n                    return (\r\n                        d.getDate() === nowData.getDate() + 2\r\n                    )\r\n                })\r\n                day2.sort((a, b) => a.main.temp - b.main.temp)\r\n                dispatch(setForecastInfo(day2[0].dt_txt,\r\n                    day2[0].main.temp,\r\n                    day2[7].main.temp,\r\n                    day2[0].weather[0].icon,\r\n                    day2[0].weather[0].main,\r\n                ))\r\n\r\n                const day3 = response.data.list.filter(item => {\r\n                    const d = new Date(item.dt_txt)\r\n                    return (\r\n                        d.getDate() === nowData.getDate() + 3\r\n                    )\r\n                })\r\n                day3.sort((a, b) => a.main.temp - b.main.temp)\r\n                dispatch(setForecastInfo(day3[0].dt_txt,\r\n                    day3[0].main.temp,\r\n                    day3[7].main.temp,\r\n                    day3[0].weather[0].icon,\r\n                    day3[0].weather[0].main,\r\n                ))\r\n                dispatch(setPreloader(false))\r\n\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport default ForecastReducer\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_CURRENT_WEATHER = 'GET_CURRENT_WEATHER'\r\n\r\nconst initialState = {\r\n    markers: []\r\n}\r\n\r\nconst MapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_CURRENT_WEATHER):\r\n            return {\r\n                ...state,\r\n                markers: [...state.markers, {icon: action.icon, temp: action.temp, latlng: action.latlng}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCurrentWeather = (icon, temp, latlng) => ({type: GET_CURRENT_WEATHER, icon, temp, latlng})\r\n\r\nexport const setMarker = (lat, lon) => {\r\n    return dispatch => {\r\n        CurrentWeather.getCurrentWeather(lat, lon)\r\n            .then(response => {\r\n                console.log(response)\r\n                dispatch(getCurrentWeather(\r\n                    response.data.weather[0].icon,\r\n                    Math.ceil(response.data.main.temp),\r\n                    {lat: lat, lng:lon}\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\nexport default MapReducer\r\n","// @flow\r\nimport React from \"react\";\r\nimport {Map, Marker, Popup, TileLayer} from \"react-leaflet\";\r\nimport style from './WeatherMap.module.css'\r\nimport {setMarker} from \"../../redux/map-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass WeatherMap extends React.Component {\r\n\r\n    state = {\r\n        markers: [[49.823, 23.959]],\r\n    }\r\n\r\n\r\n    addMarker = (e) => {\r\n        const {markers} = this.state\r\n        console.log(markers)\r\n        markers.push(e.latlng)\r\n        console.log(markers)\r\n        this.props.setMarker(e.latlng.lat, e.latlng.lng)\r\n        this.setState({markers})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Map\r\n                center={[49.823, 23.959]}\r\n                onClick={this.addMarker}\r\n                zoom={13}\r\n                // layers={['precipitation_new']}\r\n                className={style.leaflet_container}\r\n            >\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n                    // url='https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=a8de334d1f2f9e32c071bebca2a3e9ac'\r\n                />\r\n                { this.props.markers.map((marker, index) =>\r\n\r\n                    <Marker key={index} position={marker.latlng}\r\n                            // icon={new Icon({\r\n                            // iconUrl: `http://openweathermap.org/img/wn/${marker.icon}@2x.png`,\r\n                            // iconSize: [50, 50]},)}\r\n                    >\r\n                        <Popup autoPan>\r\n                            <img style={{width: '50px'}} src={`http://openweathermap.org/img/wn/${marker.icon}@2x.png`} alt={'weather'}/>\r\n                            <span>{marker.temp}°C</span>\r\n                        </Popup>\r\n                    </Marker>\r\n                )}\r\n            </Map>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        markers: state.MapReducer.markers\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {setMarker})(WeatherMap)\r\n","import React, {useEffect} from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport style from './FavCity.module.css'\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst FavCity = ({name, country, temp, icon, humidity, wind_dir, wind_speed, favsStorage, changeStorage}) => {\r\n\r\n    useEffect(()=> {\r\n        console.log(favsStorage)\r\n    }, [favsStorage])\r\n\r\n    const deleteFromFavs = (name) => {\r\n        const fav_locations = localStorage.getItem('fav_location')\r\n        localStorage.setItem('fav_location', fav_locations.split(' ').filter(word => word !== name).join(' '))\r\n        changeStorage(localStorage.getItem('fav_location'))\r\n    }\r\n\r\n    return (\r\n        <Card className='m-1'>\r\n            <Row className='m-1 d-flex flex-column align-items-end'>\r\n                <Button\r\n                    variant={'outline-info'}\r\n                    className='w-25 btn-sm'\r\n                    onClick={() => deleteFromFavs(name)}\r\n                >X</Button>\r\n            </Row>\r\n\r\n            <Card.Body>\r\n                <Row>\r\n                    <Col className={style.icon}>\r\n                        <Image\r\n                            src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <h4>{temp}°C</h4>\r\n                    </Col>\r\n                    <Col className={style.name}>\r\n\r\n                        <p>{name}</p>\r\n                        <p>{country}</p>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <Row>\r\n                    <Col>\r\n                        <p> Humidity: {humidity}%</p>\r\n                    </Col>\r\n                    <Col>Wind direction: {wind_dir}</Col>\r\n                    <Col>{wind_speed} meter/sec</Col>\r\n                </Row>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default FavCity\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_FAV_PLACE_INFO = 'GET_FAV_PLACE_INFO'\r\nconst GET_FAV_STORAGE = 'GET_FAV_STORAGE'\r\n\r\nconst initialState = {\r\n    favs: [],\r\n    favsStorage: ''\r\n}\r\n\r\nconst FavReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FAV_PLACE_INFO: {\r\n            return {\r\n                ...state,\r\n                favs: [...state.favs, {\r\n                    name: action.name,\r\n                    country: action.country,\r\n                    temp: action.temp,\r\n                    icon: action.icon,\r\n                    humidity: action.humidity,\r\n                    wind_dir: action.wind_dir,\r\n                    wind_speed: action.wind_speed\r\n                }]\r\n            }\r\n        }\r\n        case GET_FAV_STORAGE: {\r\n            return {\r\n                ...state,\r\n                favsStorage: action.name_local\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nconst windRose = (degr) => {\r\n    switch (true) {\r\n        case  (degr > 22.5 && degr < 67.5): return 'NE'\r\n        case  (degr > 67.5 && degr<112.5): return 'E'\r\n        case  (degr > 112.5 && degr<157.5): return 'SE'\r\n        case  (degr > 157.5  && degr< 202.5) : return 'S'\r\n        case  (degr > 202.5  && degr< 247.5) : return 'SW'\r\n        case ( degr > 247.5  && degr< 292.5 ): return 'W'\r\n        case  (degr > 292.5  && degr< 337.5 ): return 'NW'\r\n        default: return 'N'\r\n    }\r\n\r\n}\r\n\r\nconst setFavPlace = (name, country, temp, icon, humidity, wind_dir, wind_speed) => ({\r\n    type: GET_FAV_PLACE_INFO,\r\n    name,\r\n    country,\r\n    temp,\r\n    icon,\r\n    humidity,\r\n    wind_dir,\r\n    wind_speed\r\n})\r\n\r\nexport const changeStorage = (name_local) => ({type: GET_FAV_STORAGE, name_local})\r\n\r\nexport const getFavPlace = (city) => {\r\n    return dispatch => {\r\n        CurrentWeather.getFavCity(city)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                dispatch(setFavPlace(\r\n                    response.data.name,\r\n                    response.data.sys.country,\r\n                    Math.ceil(response.data.main.temp),\r\n                    response.data.weather[0].icon,\r\n                    response.data.main.humidity,\r\n                    windRose(response.data.wind.deg),\r\n                    response.data.wind.speed,\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default FavReducer\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FavCity from \"./FavCity/FavCity\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeStorage, getFavPlace} from \"../../redux/fav-reducer\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nclass FavCitiesClass extends React.Component<{ favs: any, getFavPlace: any, changeStorage: any, favsStorage: any }> {\r\n    state = {\r\n        show: false,\r\n        input: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('fav_location')) {\r\n            const locations = localStorage.getItem('fav_location').split(' ')\r\n            locations.map(location => this.props.getFavPlace(location))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS) {\r\n        console.log(prevProps, this.props.favsStorage)\r\n    }\r\n\r\n    handleSubmit = (data) => {\r\n        this.props.getFavPlace(data)\r\n        if (localStorage.getItem('fav_location')) {\r\n            const local = localStorage.getItem('fav_location').split(' ')\r\n            local.push(data)\r\n            localStorage.setItem('fav_location', local.join(' '))\r\n            this.props.changeStorage(localStorage.getItem('fav_location'))\r\n        } else {\r\n            localStorage.setItem('fav_location', data)\r\n            this.props.changeStorage(localStorage.getItem('fav_location'))\r\n        }\r\n        console.log(data)\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <>\r\n                <h3>Your Locations</h3>\r\n                <Container className='m-4'>\r\n                    <Row>\r\n                        <Col lg={5}>\r\n                            <Button variant={'info'} onClick={() => this.setState({show: !this.state.show})}>Add city</Button>\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                            {this.state.show &&\r\n                            <Form.Control\r\n                                onChange={e => this.setState({input: e.target.value})}\r\n                                value={this.state.input}\r\n                            />\r\n                            }\r\n                        </Col>\r\n                        <Col>\r\n                            {this.state.show &&\r\n                            <Button variant={'info'} onClick={() => this.handleSubmit(this.state.input)}>+</Button>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n                {this.props.favs.map(fav => (\r\n                        <FavCity\r\n                            name={fav.name}\r\n                            country={fav.country}\r\n                            temp={fav.temp}\r\n                            icon={fav.icon}\r\n                            humidity={fav.humidity}\r\n                            wind_dir={fav.wind_dir}\r\n                            wind_speed={fav.wind_speed}\r\n                            favsStorage={this.props.favsStorage}\r\n                            changeStorage={changeStorage}\r\n                        />\r\n                    )\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        favs: state.FavReducer.favs,\r\n        favsStorage: state.FavReducer.favsStorage\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getFavPlace, changeStorage})(FavCitiesClass)\r\n","import React, {useEffect} from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport style from \"../HomePage/HomePage.module.css\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {getInfoFromCoordinates} from \"../../redux/current-reducer\";\r\nimport {getForecastInfo} from \"../../redux/forecast-reducer\";\r\n\r\nconst Header = ({city, temp, main, icon, getInfoFromCoordinates}) => {\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            getInfoFromCoordinates(position.coords.latitude, position.coords.longitude)\r\n        });\r\n    }, [])\r\n    return(\r\n        <Container className={style.background}>\r\n            <Row>\r\n                <Col lg={1} className={'d-flex flex-column justify-content-start'}>\r\n                    <div>\r\n                        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='weather-icon'/>\r\n                    </div>\r\n\r\n                </Col>\r\n                <Col lg={2} className={'d-flex flex-column justify-content-center align-items-start'}>\r\n                    <h3>{city}</h3>\r\n                    <h4>{temp}°C</h4>\r\n                    <h4>{main}</h4>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <NavLink to={'/details'}>\r\n                    details...\r\n                </NavLink>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        city: state.CurrentReducer.city,\r\n        temp: state.CurrentReducer.temp,\r\n        icon: state.CurrentReducer.icon,\r\n        main: state.CurrentReducer.main,\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getInfoFromCoordinates, getForecastInfo})(Header)\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport style from './HomePage.module.css'\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ThreeDaysForecast from \"../3DaysForecast/3DaysForecast\";\r\nimport {connect} from \"react-redux\";\r\nimport {getInfoFromCoordinates} from \"../../redux/current-reducer\";\r\nimport {getForecastInfo} from \"../../redux/forecast-reducer\";\r\nimport FavCities from \"../FavCities/FavCities\";\r\nimport WeatherMap from \"../WeatherMap/WeatherMap\";\r\nimport FavCitiesClass from \"../FavCities/FavCitiesClass\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Header from \"../Header/Header\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            console.log(position.coords.latitude, position.coords.longitude)\r\n            props.getForecastInfo(position.coords.latitude, position.coords.longitude)\r\n        });\r\n    })\r\n    return (\r\n        <Container className='m-4'>\r\n            <Row>\r\n                <Col>\r\n\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <ThreeDaysForecast/>\r\n                </Col>\r\n                <Col>\r\n                    <WeatherMap/>\r\n                </Col>\r\n                <Col>\r\n                    <FavCitiesClass/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        city: state.CurrentReducer.city,\r\n        temp: state.CurrentReducer.temp,\r\n        icon: state.CurrentReducer.icon,\r\n        main: state.CurrentReducer.main,\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getInfoFromCoordinates, getForecastInfo})(HomePage)\r\n","import React from \"react\";\r\n\r\nconst WeatherDetails = () => {\r\n    return(\r\n        <div>details</div>\r\n    )\r\n}\r\n\r\nexport default WeatherDetails\r\n","import React from 'react';\nimport './App.css';\nimport HomePage from \"./components/HomePage/HomePage\";\nimport {Route} from \"react-router-dom\";\nimport WeatherDetails from \"./components/WeatherDetails/WeatherDetails\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  return (\n     <>\n       <Header />\n       <Route exact path='/' render={() => <HomePage/>}/>\n       <Route path='/details' render={() => <WeatherDetails/>}/>\n     </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport CurrentReducer from \"./current-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport ForecastReducer from \"./forecast-reducer\";\r\nimport FavReducer from \"./fav-reducer\";\r\nimport MapReducer from \"./map-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n        CurrentReducer: CurrentReducer,\r\n        ForecastReducer: ForecastReducer,\r\n        FavReducer: FavReducer,\r\n        MapReducer: MapReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}