{"version":3,"sources":["components/3DaysForecast/OneDayForecast/OneDayForecast.js","components/3DaysForecast/3DaysForecast.js","api/api.js","redux/map-reducer.js","components/WeatherMap/WeatherMap.js","components/FavCities/FavCity/FavCity.js","utilits/utilits.js","redux/fav-reducer.js","components/FavCities/FavCitiesClass.js","components/HomePage/HomePage.js","redux/current-reducer.js","components/Header/Header.js","redux/forecast-reducer.js","components/WeatherDetails/WeatherDetails.js","components/WeatherDetails/WeatherDetailsContainer.js","App.js","serviceWorker.js","redux/store.js","index.js","components/Header/Header.module.css","components/WeatherMap/WeatherMap.module.css","components/3DaysForecast/OneDayForecast/OneDayForecast.module.css","components/FavCities/FavCity/FavCity.module.css"],"names":["OneDayForecast","date","temp_min","temp_max","icon","details","units","local_date","Date","Card","Body","className","style","card_body","Row","Col","lg","Img","maxWidth","src","Title","toDateString","split","Subtitle","right_badge","Math","ceil","connect","state","three_days_forecast","ForecastReducer","isLoading","CurrentReducer","props","Header","to","textDecoration","color","styles","link","Spinner","animation","role","map","one_day_forecast","index","key","dt","temp","min","max","weather","main","api_key","instance","axios","baseURL","CurrentWeather","lat","lon","get","city","initialState","markers","MapReducer","action","type","latlng","WeatherMap","addMarker","e","push","setMarker","lng","setState","faMapMarkerAlt","Map","center","localStorage","getItem","onClick","this","zoom","leaflet_container","TileLayer","attribution","url","marker","Marker","position","divIcon","html","renderToStaticMarkup","img","alt","React","Component","dispatch","then","response","data","FavCity","name","country","humidity","wind_dir","wind_speed","getFavPlace","clearFavs","Button","variant","fav_locations","setItem","filter","word","join","locations","location","deleteFromFavs","Image","Footer","faTint","faWind","windRose","degr","favs","favsStorage","FavReducer","FavCitiesClass","input","handleSubmit","local","item","length","prevProps","prevState","snapshot","faStar","Container","Accordion","Toggle","as","eventKey","Collapse","Form","Control","onChange","target","value","fav","sys","wind","deg","speed","HomePage","SET_LOADER","getInfoFromCoordinates","payload","getUnits","setUnits","useState","isFahrenheit","setFahrenheit","useEffect","background","switch","cn","slider","round","seven_days_forecast","isLoading7Days","setPreloader7Days","WeatherDetails","time","toLocaleTimeString","slice","day","toLocaleDateString","feels_like","description","toUpperCase","pressure","visibility","daily","isLoadingForecast","getWeatherDetails","get7DaysForecast","getForecastInfo","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","from","exact","path","render","Boolean","window","hostname","match","reducers","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5692fdb6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport style from './OneDayForecast.module.css'\r\n\r\nconst OneDayForecast = ({date, temp_min, temp_max, icon, details, units}) => {\r\n    const local_date = new Date(date * 1000)\r\n\r\n    return (\r\n        <Card.Body className={style.card_body}>\r\n            <Row>\r\n                <Col lg={3}>\r\n                    <Card.Img style={{maxWidth: '100px'}} src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n                </Col>\r\n                <Col>\r\n                    <Card.Title>{local_date.toDateString().split(' ')[0]},\r\n                        {local_date.toDateString().split(' ')[1]} {local_date.toDateString().split(' ')[2]}\r\n                    </Card.Title>\r\n                    <Card.Subtitle>{details}</Card.Subtitle>\r\n                </Col>\r\n                <Col className={style.right_badge} lg={3}>\r\n                    <div>{Math.ceil(temp_min)}\r\n                        {units === 'metric' ? '°C' : 'F'}/{Math.ceil(temp_max)}\r\n                        {units === 'metric' ? '°C' : 'F'}</div>\r\n                </Col>\r\n            </Row>\r\n        </Card.Body>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default OneDayForecast\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport OneDayForecast from \"./OneDayForecast/OneDayForecast\";\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from '../Header/Header.module.css'\r\n\r\n\r\nconst ThreeDaysForecast = (props) => {\r\n    return (\r\n        <Card>\r\n            <Card.Header className='d-flex flex-row justify-content-between'>\r\n                <Card.Title>\r\n                    3 Days Forecast\r\n                </Card.Title>\r\n                <NavLink to='/details' style={{textDecoration: 'none', color: '#000'}} className={styles.link}>\r\n                    See more...\r\n                </NavLink>\r\n            </Card.Header>\r\n            <Card.Body>\r\n\r\n                {props.isLoading\r\n                    ? <Spinner animation=\"border\" role=\"status\"/>\r\n                    : props.three_days_forecast.map((one_day_forecast, index) => {\r\n                            return <OneDayForecast\r\n                                units={props.units}\r\n                                key={index}\r\n                                date={one_day_forecast.dt}\r\n                                temp_min={one_day_forecast.temp.min}\r\n                                temp_max={one_day_forecast.temp.max}\r\n                                icon={one_day_forecast.weather[0].icon}\r\n                                details={one_day_forecast.weather[0].main}\r\n                            />\r\n                        }\r\n                    )\r\n                }\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        three_days_forecast: state.ForecastReducer.three_days_forecast,\r\n        isLoading: state.ForecastReducer.isLoading,\r\n        units: state.CurrentReducer.units\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ThreeDaysForecast)\r\n","import * as axios from 'axios'\r\n\r\nconst api_key = 'a8de334d1f2f9e32c071bebca2a3e9ac'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/'\r\n})\r\n\r\nexport const CurrentWeather = {\r\n    getCurrentWeather(lat, lon, units = 'metric') {\r\n        return (\r\n            instance.get(`weather?lat=${lat}&lon=${lon}&appid=${api_key}&units=${units}`)\r\n        )\r\n    },\r\n    getFavCity(city, units = 'metric') {\r\n        return (\r\n            instance.get(`weather?q=${city}&appid=${api_key}&units=${units}`)\r\n        )\r\n    },\r\n    get7DaysForecast(lat, lon, units = 'metric') {\r\n        return (\r\n            instance.get(`onecall?lat=${lat}&lon=${lon}&exclude=current,minutely,hourly,alerts&appid=${api_key}&units=${units}`)\r\n        )\r\n    }\r\n}\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_CURRENT_WEATHER = 'GET_CURRENT_WEATHER'\r\n\r\nconst initialState = {\r\n    markers: []\r\n}\r\n\r\nconst MapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_CURRENT_WEATHER):\r\n            return {\r\n                ...state,\r\n                markers: [...state.markers, {icon: action.icon, temp: action.temp, latlng: action.latlng}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCurrentWeather = (icon, temp, latlng) => ({type: GET_CURRENT_WEATHER, icon, temp, latlng})\r\n\r\nexport const setMarker = (lat, lon, units) => {\r\n    return dispatch => {\r\n        CurrentWeather.getCurrentWeather(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(getCurrentWeather(\r\n                    response.data.weather[0].icon,\r\n                    Math.ceil(response.data.main.temp),\r\n                    {lat: lat, lng:lon}\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\nexport default MapReducer\r\n","import React from \"react\";\r\nimport {Map, Marker, TileLayer} from \"react-leaflet\";\r\nimport style from './WeatherMap.module.css'\r\nimport {setMarker} from \"../../redux/map-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {divIcon} from \"leaflet\";\r\nimport {renderToStaticMarkup} from \"react-dom/server\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faMapMarkerAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nclass WeatherMap extends React.Component {\r\n\r\n    state = {\r\n        markers: [[49.823, 23.959]],\r\n    }\r\n\r\n    addMarker = (e) => {\r\n        const {markers} = this.state\r\n        markers.push(e.latlng)\r\n        this.props.setMarker(e.latlng.lat, e.latlng.lng)\r\n        this.setState({markers})\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n               <h4><FontAwesomeIcon icon={faMapMarkerAlt}/> Select the place on the map to see its current weather</h4>\r\n                <Map\r\n                center={[localStorage.getItem('lat'), localStorage.getItem('lon')]}\r\n                onClick={this.addMarker}\r\n                zoom={13}\r\n                className={style.leaflet_container}\r\n            >\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n                />\r\n                {this.props.markers.map((marker, index) =>\r\n\r\n                    <Marker key={index} position={marker.latlng}\r\n                            icon={new divIcon({\r\n                                html: renderToStaticMarkup(<div className={style.marker}>\r\n                                    <img\r\n                                        src={`http://openweathermap.org/img/wn/${marker.icon}@2x.png`}\r\n                                        className={style.img}\r\n                                        alt='marker'/>\r\n                                    <p className={style.temp}>\r\n                                        {marker.temp} {this.props.units === 'metric' ? '°C' : 'F'}</p>\r\n                                </div>),\r\n                            })}>\r\n                    </Marker>\r\n                )}\r\n            </Map>\r\n                </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        markers: state.MapReducer.markers,\r\n        units: state.CurrentReducer.units\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {setMarker})(WeatherMap)\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport style from './FavCity.module.css'\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faWind, faTint} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst FavCity = ({\r\n                     name, country, temp, icon,\r\n                     humidity, wind_dir, wind_speed,\r\n                     getFavPlace, units, clearFavs\r\n                 }) => {\r\n\r\n    const deleteFromFavs = (name) => {\r\n        const fav_locations = localStorage.getItem('fav_location')\r\n        localStorage.setItem('fav_location', fav_locations.split(' ').filter(word => word !== name).join(' '))\r\n        const locations = localStorage.getItem('fav_location').split(' ')\r\n        clearFavs()\r\n        locations[0] && locations.map(location => getFavPlace(location, units))\r\n    }\r\n\r\n    return (\r\n        <Card className='m-1'>\r\n            <Row className='m-1 d-flex flex-column align-items-end'>\r\n                <Button\r\n                    variant={'outline-info'}\r\n                    className='w-25 btn-sm'\r\n                    onClick={() => deleteFromFavs(name)}\r\n                >X</Button>\r\n            </Row>\r\n\r\n            <Card.Body>\r\n                <Row>\r\n                    <Col className={style.icon} lg={3}>\r\n                        <Image\r\n                            style={{maxWidth: '70px'}}\r\n                            src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <h4>{temp}°C</h4>\r\n                    </Col>\r\n                    <Col className={style.name}>\r\n                        <div>{name}</div>\r\n                        <div>{country}</div>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <Row>\r\n                    <div><FontAwesomeIcon icon={faTint}/> Humidity: {humidity}%</div>\r\n                </Row>\r\n                <Row>\r\n                    <div><FontAwesomeIcon icon={faWind}/> {wind_speed}m/s {wind_dir}</div>\r\n                </Row>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default FavCity\r\n","export const windRose = (degr) => {\r\n    switch (true) {\r\n        case  (degr > 22.5 && degr < 67.5): return 'NE'\r\n        case  (degr > 67.5 && degr<112.5): return 'E'\r\n        case  (degr > 112.5 && degr<157.5): return 'SE'\r\n        case  (degr > 157.5  && degr< 202.5) : return 'S'\r\n        case  (degr > 202.5  && degr< 247.5) : return 'SW'\r\n        case ( degr > 247.5  && degr< 292.5 ): return 'W'\r\n        case  (degr > 292.5  && degr< 337.5 ): return 'NW'\r\n        default: return 'N'\r\n    }\r\n\r\n}\r\n","import {CurrentWeather} from \"../api/api\";\r\nimport {windRose} from \"../utilits/utilits\";\r\n\r\nconst GET_FAV_PLACE_INFO = 'GET_FAV_PLACE_INFO'\r\nconst CLEAR_FAVS = 'CLEAR_FAVS'\r\n\r\nconst initialState = {\r\n    favs: [],\r\n    favsStorage: ''\r\n}\r\n\r\nconst FavReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FAV_PLACE_INFO: {\r\n            return {\r\n                ...state,\r\n                favs: [...state.favs, {\r\n                    name: action.name,\r\n                    country: action.country,\r\n                    temp: action.temp,\r\n                    icon: action.icon,\r\n                    humidity: action.humidity,\r\n                    wind_dir: action.wind_dir,\r\n                    wind_speed: action.wind_speed\r\n                }]\r\n            }\r\n        }\r\n        case CLEAR_FAVS: {\r\n            return {\r\n                ...state,\r\n                favs: []\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n\r\nconst setFavPlace = (name, country, temp, icon, humidity, wind_dir, wind_speed) => ({\r\n    type: GET_FAV_PLACE_INFO,\r\n    name,\r\n    country,\r\n    temp,\r\n    icon,\r\n    humidity,\r\n    wind_dir,\r\n    wind_speed\r\n})\r\n\r\nconst setClearFavs = () => ({type: CLEAR_FAVS})\r\n\r\nexport const getFavPlace = (city, units) => {\r\n    return dispatch => {\r\n        CurrentWeather.getFavCity(city, units)\r\n            .then(response => {\r\n                dispatch(setFavPlace(\r\n                    response.data.name,\r\n                    response.data.sys.country,\r\n                    Math.ceil(response.data.main.temp),\r\n                    response.data.weather[0].icon,\r\n                    response.data.main.humidity,\r\n                    windRose(response.data.wind.deg),\r\n                    response.data.wind.speed,\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\nexport const clearFavs = () => {\r\n    return dispatch => {\r\n        dispatch(setClearFavs())\r\n    }\r\n}\r\n\r\n\r\nexport default FavReducer\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FavCity from \"./FavCity/FavCity\";\r\nimport {connect} from \"react-redux\";\r\nimport {clearFavs, getFavPlace} from \"../../redux/fav-reducer\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {Accordion} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faStar} from '@fortawesome/free-regular-svg-icons'\r\n\r\nclass FavCitiesClass extends React.Component {\r\n\r\n    state = {\r\n        input: ''\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('fav_location')) {\r\n            const locations = localStorage.getItem('fav_location').split(' ')\r\n            locations.map(location => this.props.getFavPlace(location, this.props.units))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (localStorage.getItem('fav_location') && prevProps.units !== this.props.units) {\r\n            this.props.clearFavs()\r\n            const locations = localStorage.getItem('fav_location').split(' ')\r\n            locations.map(location => this.props.getFavPlace(location, this.props.units))\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearFavs()\r\n    }\r\n\r\n\r\n    handleSubmit = (data) => {\r\n        if (localStorage.getItem('fav_location')) {\r\n            const local = localStorage.getItem('fav_location').split(' ')\r\n            if ((local.filter(item => item === data)).length === 0) {\r\n                local.push(data)\r\n                localStorage.setItem('fav_location', local.join(' '))\r\n                this.props.getFavPlace(data, this.props.units)\r\n            }\r\n        } else {\r\n            localStorage.setItem('fav_location', data)\r\n            this.props.getFavPlace(data, this.props.units)\r\n        }\r\n        this.setState({input: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h3><FontAwesomeIcon icon={faStar}/> Your Locations</h3>\r\n                <Container className='m-2'>\r\n                    <Row className='mx-2'>\r\n                        <Accordion>\r\n                            <Row lg={10}>\r\n                                <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"0\">\r\n                                    Add city\r\n                                </Accordion.Toggle>\r\n                            </Row>\r\n                            <Row lg={10} className='my-2'>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Control\r\n                                                onChange={e => this.setState({input: e.target.value})}\r\n                                                value={this.state.input}/>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button variant={'info'}\r\n                                                    onClick={() => this.handleSubmit(this.state.input)}>+</Button>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                </Accordion.Collapse>\r\n                            </Row>\r\n\r\n                        </Accordion>\r\n\r\n\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n                {this.props.favs.map((fav, index) => (\r\n                        <FavCity\r\n                            units={this.props.units}\r\n                            key={index}\r\n                            name={fav.name}\r\n                            country={fav.country}\r\n                            temp={fav.temp}\r\n                            icon={fav.icon}\r\n                            humidity={fav.humidity}\r\n                            wind_dir={fav.wind_dir}\r\n                            wind_speed={fav.wind_speed}\r\n                            getFavPlace={this.props.getFavPlace}\r\n                            clearFavs={this.props.clearFavs}\r\n                        />\r\n                    )\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        favs: state.FavReducer.favs,\r\n        units: state.CurrentReducer.units\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getFavPlace, clearFavs})(FavCitiesClass)\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport ThreeDaysForecast from \"../3DaysForecast/3DaysForecast\";\r\nimport WeatherMap from \"../WeatherMap/WeatherMap\";\r\nimport FavCitiesClass from \"../FavCities/FavCitiesClass\";\r\n\r\n\r\nconst HomePage = () => {\r\n\r\n    return (\r\n        <Container className='m-4'>\r\n            <Row>\r\n                <Col>\r\n                    <ThreeDaysForecast/>\r\n                </Col>\r\n                <Col>\r\n                    <WeatherMap/>\r\n                </Col>\r\n                <Col lg={3}>\r\n                    <FavCitiesClass/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_INFO_FROM_COORDINATES = 'GET_INFO_FROM_COORDINATES'\r\nconst GET_WEATHER_DETAILS = 'GET_WEATHER_DETAILS'\r\nconst SET_LOADER = 'current/SET_PRELOADER'\r\nconst SET_UNITS = 'SET_UNITS'\r\n\r\n\r\nconst initialState = {\r\n    city: null,\r\n    country: null,\r\n    temp: null,\r\n    icon: null,\r\n    details: '',\r\n    isLoading: true,\r\n    units: 'metric'\r\n\r\n}\r\n\r\nconst CurrentReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_INFO_FROM_COORDINATES): {\r\n            return {\r\n                ...state,\r\n                city: action.city,\r\n                country: action.country,\r\n                temp: Math.ceil(action.temp),\r\n                icon: action.icon,\r\n                main: action.main\r\n            }\r\n\r\n        }\r\n        case GET_WEATHER_DETAILS: {\r\n            return {\r\n                ...state,\r\n                details: action.payload\r\n            }\r\n        }\r\n        case SET_LOADER: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        }\r\n        case SET_UNITS: {\r\n            return {\r\n                ...state,\r\n                units: action.units\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nconst setPreloader = (value) => ({type: SET_LOADER, value})\r\nconst setInfoFromCoordinates = (city,country, temp, icon, main) => ({type: GET_INFO_FROM_COORDINATES, city,country, temp, icon, main})\r\nconst setWeatherDetails = (payload) => ({type: GET_WEATHER_DETAILS, payload})\r\nconst setUnits = (units) => ({type: SET_UNITS, units})\r\n\r\nexport const getInfoFromCoordinates = (lat, lon, units) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.getCurrentWeather(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(setInfoFromCoordinates(\r\n                    response.data.name,\r\n                    response.data.sys.country,\r\n                    response.data.main.temp,\r\n                    response.data.weather[0].icon,\r\n                    response.data.weather[0].main\r\n                ))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getWeatherDetails = (lat, lon, units) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.getCurrentWeather(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(setWeatherDetails(response.data))\r\n                dispatch(setPreloader(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport const getUnits = (units) => {\r\n    return dispatch => {\r\n        dispatch(setUnits(units))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default CurrentReducer\r\n","import React, {useEffect} from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {getInfoFromCoordinates, getUnits} from \"../../redux/current-reducer\";\r\nimport styles from './Header.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Header = ({city, country, temp, main, icon, getInfoFromCoordinates, getUnits, units}) => {\r\n\r\n    const [isFahrenheit, setFahrenheit] = React.useState(true);\r\n\r\n    const toggleSwitcher = () => {\r\n        setFahrenheit(!isFahrenheit);\r\n        isFahrenheit ? getUnits('imperial') : getUnits('metric')\r\n\r\n    };\r\n    useEffect(() => {\r\n        getInfoFromCoordinates(localStorage.getItem('lat'), localStorage.getItem('lon'), units)\r\n    }, [units])\r\n    return (\r\n        <Container className={styles.background}>\r\n            <Row>\r\n                <Col lg={1} className={'d-flex flex-column justify-content-start ml-5'}>\r\n                    <div>\r\n                        <NavLink to={'/weather_forecast'}>\r\n                            <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='weather-icon'/>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                </Col>\r\n                <Col lg={1} className={'d-flex flex-column justify-content-center align-items-start'}>\r\n                    <h4>{temp} {units === 'metric' ?'°C': 'F'}</h4>\r\n                    <h4>{main}</h4>\r\n                </Col>\r\n                <Col lg={2}\r\n                     className={'d-flex flex-column justify-content-center align-items-start'}>\r\n                    <h3>{city}, {country}</h3>\r\n                </Col>\r\n                <Col lg={7} className='d-flex flex-row justify-content-end align-items-end'>\r\n                    <div className='d-flex flex-row align-items-center'>\r\n                        <span className='mx-2 font-weight-bold'>°C</span>\r\n                        <label className={styles.switch}>\r\n                            <input type=\"checkbox\" value={isFahrenheit} onChange={toggleSwitcher}/>\r\n                            <span className={cn(styles.slider, styles.round)}></span>\r\n                        </label>\r\n                        <span className='mx-2 font-weight-bold'>F</span>\r\n                    </div>\r\n\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        city: state.CurrentReducer.city,\r\n        country: state.CurrentReducer.country,\r\n        temp: state.CurrentReducer.temp,\r\n        icon: state.CurrentReducer.icon,\r\n        main: state.CurrentReducer.main,\r\n        units: state.CurrentReducer.units\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getInfoFromCoordinates, getUnits})(Header)\r\n\r\n","import {CurrentWeather} from \"../api/api\";\r\n\r\nconst GET_FORECAST_INFO = 'GET_FORECAST_INFO'\r\nconst GET_7DAYS_FORECAST = 'GET_7DAYS_FORECAST'\r\nconst SET_PRELOADER = 'SET_PRELOADER'\r\nconst SET_PRELOADER_7DAYS = 'SET_PRELOADER_7DAYS'\r\n\r\nconst initialState = {\r\n    three_days_forecast: [],\r\n    seven_days_forecast: [],\r\n    isLoading: true,\r\n    isLoading7Days: true\r\n\r\n}\r\n\r\nconst ForecastReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FORECAST_INFO: {\r\n            return {\r\n                ...state,\r\n                three_days_forecast: action.payload\r\n            }\r\n        }\r\n        case SET_PRELOADER: {\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        }\r\n        case SET_PRELOADER_7DAYS: {\r\n            return {\r\n                ...state,\r\n                isLoading7Days: action.value\r\n            }\r\n        }\r\n        case GET_7DAYS_FORECAST: {\r\n            return {\r\n                ...state,\r\n                seven_days_forecast: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setForecastInfo = (payload) => ({type: GET_FORECAST_INFO, payload})\r\n\r\nconst set7DaysForecast = (payload) => ({type: GET_7DAYS_FORECAST, payload})\r\n\r\nexport let setPreloader = (value) => ({type: SET_PRELOADER, value})\r\nexport let setPreloader7Days = (value) => ({type: SET_PRELOADER_7DAYS, value})\r\n\r\nexport const getForecastInfo = (lat, lon, units) => {\r\n    return (dispatch) => {\r\n        CurrentWeather.get7DaysForecast(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(setForecastInfo(response.data.daily.slice(1,4)))\r\n                dispatch(setPreloader(false))\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const get7DaysForecast = (lat, lon, units) => {\r\n    return dispatch => {\r\n        dispatch(setPreloader7Days(true))\r\n        CurrentWeather.get7DaysForecast(lat, lon, units)\r\n            .then(response => {\r\n                dispatch(set7DaysForecast(response.data))\r\n                dispatch(setPreloader7Days(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport default ForecastReducer\r\n","import React from \"react\";\r\nimport {Container, Card, Row, Col} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faWind} from '@fortawesome/free-solid-svg-icons'\r\nimport {windRose} from \"../../utilits/utilits\";\r\nimport OneDayForecast from \"../3DaysForecast/OneDayForecast/OneDayForecast\";\r\n\r\nconst WeatherDetails = ({details, seven_days_forecast, units}) => {\r\n\r\n    const date = new Date(details.dt * 1000)\r\n    const time = date.toLocaleTimeString().slice(0, 5)\r\n    const day = date.toLocaleDateString()\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <p style={{color: '#fc623e'}}>{time}, {day}</p>\r\n                            <Card.Title><h1>{details.name}, {details.sys.country}</h1></Card.Title>\r\n                            <div>\r\n                                <img src={`http://openweathermap.org/img/wn/${details.weather[0].icon}@2x.png`}\r\n                                     alt='weather-icon'/>\r\n                                <span>{Math.ceil(details.main.temp)} {units === 'metric' ? '°C' : 'F'}</span>\r\n                            </div>\r\n                            <div>\r\n                                <p>Feels like {Math.ceil(details.main.feels_like)}{units === 'metric' ? '°C' : 'F'}. {details\r\n                                    .weather[0].description[0].toUpperCase()}\r\n                                    {details.weather[0].description.slice(1)}</p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    <FontAwesomeIcon icon={faWind}/>\r\n                                    {details.wind.speed} {units === 'metric' ? 'm/s' : 'mph'} {windRose(details.wind.deg)} Pressure:\r\n                                    {details.main.pressure}hPa Humidity: {details.main.humidity}%\r\n                                </p>\r\n                                <p>\r\n                                    Visibility: {details.visibility / 100} km\r\n                                </p>\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title><h2>8-day forecast</h2></Card.Title>\r\n                            {seven_days_forecast.daily.map((day, index) => {\r\n                                    const {min, max} = day.temp\r\n                                    const {icon, main} = day.weather[0]\r\n                                    return <OneDayForecast\r\n                                        units={units}\r\n                                        key={index}\r\n                                        temp_max={max}\r\n                                        temp_min={min}\r\n                                        icon={icon}\r\n                                        date={day.dt}\r\n                                        details={main}/>\r\n                                }\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default WeatherDetails\r\n","import React, {useEffect} from \"react\";\r\nimport {connect} from 'react-redux'\r\nimport {Spinner} from \"react-bootstrap\";\r\nimport {getWeatherDetails} from \"../../redux/current-reducer\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\nimport {get7DaysForecast} from \"../../redux/forecast-reducer\";\r\n\r\nconst WeatherDetailsContainer = ({\r\n                                     getWeatherDetails, details,\r\n                                     isLoading, get7DaysForecast, seven_days_forecast,\r\n                                     isLoadingForecast, units\r\n                                 }) => {\r\n\r\n    const lat = localStorage.getItem('lat')\r\n    const lon = localStorage.getItem('lon')\r\n\r\n    useEffect(() => {\r\n        getWeatherDetails(lat, lon, units)\r\n        get7DaysForecast(lat, lon, units)\r\n    }, [units])\r\n\r\n    return (\r\n        <div className='d-flex flex-column align-items-center'>\r\n            {isLoading || isLoadingForecast\r\n                ? <Spinner animation=\"border\" variant=\"info\"/>\r\n                : <WeatherDetails\r\n                    details={details}\r\n                    seven_days_forecast={seven_days_forecast}\r\n                    units={units}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        details: state.CurrentReducer.details,\r\n        isLoading: state.CurrentReducer.isLoading,\r\n        isLoadingForecast: state.ForecastReducer.isLoading7Days,\r\n        seven_days_forecast: state.ForecastReducer.seven_days_forecast,\r\n        units: state.CurrentReducer.units\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getWeatherDetails, get7DaysForecast})(WeatherDetailsContainer)\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport HomePage from \"./components/HomePage/HomePage\";\nimport {Redirect, Route} from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport {connect} from \"react-redux\";\nimport {getInfoFromCoordinates} from \"./redux/current-reducer\";\nimport {getForecastInfo} from \"./redux/forecast-reducer\";\nimport WeatherDetailsContainer from \"./components/WeatherDetails/WeatherDetailsContainer\";\n\nconst App = (props) => {\n\n    const getCurrentLocation = () => {\n        navigator.geolocation.getCurrentPosition(position => {\n            localStorage.setItem('lat', position.coords.latitude)\n            localStorage.setItem('lon', position.coords.longitude)\n        }, () => {\n            localStorage.setItem('lat', 51.5074)\n            localStorage.setItem('lon', 0.1278)\n        })\n    }\n\n\n    useEffect(() => {\n        getCurrentLocation()\n        props.getForecastInfo(localStorage.getItem('lat'), localStorage.getItem('lon'), props.units)\n    }, [props.units])\n\n    return (\n        <>\n            <Header/>\n            <Redirect from=\"/\" to=\"/weather_forecast\"/>\n            <Route exact path='/weather_forecast' render={() => <HomePage/>}/>\n            <Route path='/details' render={() => <WeatherDetailsContainer/>}/>\n        </>\n    );\n}\n\nlet mapStateToProps = (state) => {\n    return{\n        units: state.CurrentReducer.units\n    }\n}\n\nexport default connect(mapStateToProps, {getInfoFromCoordinates, getForecastInfo})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport CurrentReducer from \"./current-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport ForecastReducer from \"./forecast-reducer\";\r\nimport FavReducer from \"./fav-reducer\";\r\nimport MapReducer from \"./map-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n        CurrentReducer: CurrentReducer,\r\n        ForecastReducer: ForecastReducer,\r\n        FavReducer: FavReducer,\r\n        MapReducer: MapReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Header_background__2Bu-x\",\"switch\":\"Header_switch__1J-gm\",\"slider\":\"Header_slider__3in5L\",\"round\":\"Header_round__1JOks\",\"link\":\"Header_link__6ZqJI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaflet_container\":\"WeatherMap_leaflet_container__MMeZe\",\"img\":\"WeatherMap_img__twUzL\",\"marker\":\"WeatherMap_marker__5IGLc\",\"temp\":\"WeatherMap_temp__1m3fF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"right_badge\":\"OneDayForecast_right_badge__FhEbM\",\"card_body\":\"OneDayForecast_card_body__3MXMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"FavCity_name__2d_Ez\",\"icon\":\"FavCity_icon__3UNuD\"};"],"sourceRoot":""}